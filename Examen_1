---
title: "Análisis Predictivo - Examen 1"
author: "Emilia Sargenti"
date:  "`r format(Sys.Date())`"
output: 
  bookdown::html_document2:
    theme: readable
    toc: true #TRUE to include a table of contents in the output
    toc_depth: 1 # Depth of headers to include in table of contents
    toc_float: true
    code_download: false
    number_sections: true
    citation_package: natbib
link-citations: yes
bibliography: []
---

```{r clean,  message=F, include=FALSE}
library(knitr)
library(dplyr)
library(lubridate)
library(GGally)
library(ggpubr)
library(skimr)
options(dplyr.summarise.inform = FALSE)
base <- read.csv("london_merged.csv",sep=",")
```



## Introducción
```{r,echo=FALSE}
variables_cant <- dim(base)[2]
registros_cant <- dim(base)[1]
```
El presente trabajo tiene como objetivo analizar la base de datos London obtenida de Kaggle, la cual se puede encontrar en el siguiente link: https://www.kaggle.com/datasets/hmavrodiev/london-bike-sharing-dataset .

Esta base cuenta con `r variables_cant` variables y `r registros_cant` registros en donde se presenta la información acerca de este nuevo sistema de alquiler de bicicletas ubicada en la ciudad de Londres, Reino Unido. La información fue recabada desde Enero de 2015 a Enero de 2017.

El objetivo principal es poder predecir la cantidad de bicicletas compartidad. #Ver si por estacion o por que

## Exploración de variables
La base de datos presenta las siguiente variables: 

- Timestamp: timestamp field for grouping the data

- cnt: the count of a new bike shares

- t1: real temperature in C

- t2: temperature in C "feels like"

- hum: humidity in percentage

- wind_speed: wind speed in km/h

- weather_code: category of the weather 
  
  (1=Clear; mostly clear but have some values with haze/fog/patches of fog/ fog in vicinity,
  
   2=scattered clouds / few clouds,
  
   3 = Broken clouds,
  
   4 = Cloudy,
  
   7 = Rain/ light Rain shower/ Light rain,
  
   10 = rain with thunderstorm,
  
   26 = snowfall,
  
   94 = Freezing Fog)

- is_holiday: boolean field (1=holiday, 0=non holiday)

- is_weekend: boolean field (1=if the day is weekend, 0=the day is not weekend)

- season: category field meteorological seasons (0=spring, 1=summer, 2=fall, 3=winter)

La variable a predecir es:

  - cnt: the count of a new bike shares
  
Una vez revisado todas las variables se decidió que se utilizarán todas ellas, sin embargo algunas de ellas serán modificadas con el fin de facilitar el trabajo. En primer lugar, la variable *cnt* se le cambiará el nombre a *count*. Por otro lado la variable *timestamp* será dividida en 4 variables distintas que se llamarán *year*, *month*, *day*, *time*. Luego, las variables *season* y *month* se les cambiará el valor, a partir de su número se le asignará la estación o mes correspondiente.

```{r, echo=FALSE}  
df <- data.frame(base)
df <- df %>% rename("count"="cnt")
```

```{r, echo=FALSE} 
df$day<-day(df$timestamp)
df$month<-month(df$timestamp)
df$year<-year(df$timestamp)
df$time<-format(df$timestamp, format = "%H:%M:%S")
head(df)
#corregir
```

```{r, echo=FALSE}  
df=df%>%mutate(season=case_when(season==0~"Spring", season==1~"Summer",season==2~"Fall", season==3~"Winter"))

```

```{r, echo=FALSE}  
df=df%>%mutate(month=case_when(month==1~"January", month==2~"February",month==3~"March",month==4~"April",month==5~"May",month==6~"June",month==7~"July",month==8~"August",month==9~"September",month==10~"October",month==11~"November",month==12~"December"))

```

Para continuar con el análisis de la base, se buscó si existe algun valores duplicados o missing value.
```{r, echo=FALSE}  
duplicados=anyDuplicated(base)
sapply(base, function(x) sum(is.na(x)))
```

A partir de los resultados obetnidos se puede confirmar que la base cuenta `r duplicados` valores duplicados y no cuenta con ningun missing value. Esto quiere decir que no es necesario hacer otra modificación a la base.


#Variables Categoricas
```{r, echo=FALSE}  
df_categoricas = df %>% select_if(function(x) !is.numeric(x))
df_categoricas<-summary(df_categoricas)
```

```{r, echo=FALSE}
kable(df_categoricas, format = "html", table.attr = "style='width:90%;'",digits = 3, format.args = list(big.mark = ",",scientific = FALSE)) %>% 
  kableExtra::kable_styling()
  options(knitr.kable.NA = '')
```

Mediante la tabla se puede observar que todas las variables categoricas contienen la misma cantidad de registros confirmarmando la falta de missing values.

```{r, echo=FALSE}  
tabla<-df%>%select(month,year, count)
library(gtsummary)
tabla%>%tbl_summary()
```

#Variables Numericas


```{r, echo=FALSE}  
df_numericas = df %>% select_if(is.numeric)
df_numericas%>%summary()
```
```{r, echo=FALSE}
kable(df_numericas, format = "html", table.attr = "style='width:90%;'",digits = 3, format.args = list(big.mark = ",",scientific = FALSE),caption = "Summary de las variables numericas") %>% 
  kableExtra::kable_styling()
```


```{r, echo=FALSE}  
df_num = df %>% select_if(is.numeric)
df_cat = df %>% select_if(function(x) !is.numeric(x))
```


#Correlaciones

```{r, echo=FALSE}  
GGally::ggcorr(
  df_num, method=c("pairwise","spearman"),  
  label=T, hjust=1, label_size=2, layout.exp=10, size=3)  #a chequear
```

```{r, echo=FALSE} 
cor_matrix = cor(df_numericas, method="spearman", use="pairwise")
cor_matrix[upper.tri(cor_matrix, diag=T)] = NA
df_cor = cor_matrix %>% as.table() %>% as.data.frame()
df_cor %>% 
  rename(corr = Freq) %>% 
  filter(!is.na(corr) & Var1 != Var2) %>% 
  arrange(-abs(corr)) %>% 
  head(10) %>% 
  knitr::kable() %>%
  kableExtra::kable_styling()
```

Grafico de Barras por estacion

```{r, echo=FALSE}
seasons_avg <- df %>% 
  group_by(season) %>%
  summarise(avg_counts = mean(count))
```

```{r, echo=FALSE}
ggplot(seasons_avg, aes(season, avg_counts, fill = season)) +
  geom_col(show.legend = FALSE) + labs(x = "Season", y = "Average Counts", title = "Average London Bike Shares By Season (2015-2017)", alt = "Bar graph showing average London bike shares by season from Jan 2015 to Jan 2017") +
scale_x_continuous(breaks = 0:3, labels = c("Spring", "Summer", "Fall", "Winter")) +
scale_fill_gradient(labels = c("Spring", "Summer", "Fall", "Winter"), low = '#72E0AC', high = '#0077B6')
```

```{r, echo=FALSE}
weather_avg <- df %>% 
  group_by(weather_code) %>%
  summarise(avg_counts = mean(count))
```

```{r, echo=FALSE}
ggplot(df_month,aes(month, cantidad, fill=month))+
  geom_bar(stat="identity",position="dodge")+
  labs(x="Month",
       y="Cantidad de Bicicletas",
      title="Cantidad de Bicicletas por Mes",
      fill="month")+
  theme_classic()
```

```{r, echo=FALSE}
ggplot(data = cc, aes(y = lifeExp, x = year ,color=country)) +
  geom_line() +
  geom_point()
```
